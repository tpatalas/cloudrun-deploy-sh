steps:
  - name: "gcr.io/cloud-builders/npm"
    entrypoint: "npm"
    args:
      - "ci"
  - name: "gcr.io/cloud-builders/npm"
    entrypoint: "npm"
    args:
      - "run"
      - "test"
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    id: "check-branch"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        if [[ "$BRANCH_NAME" == "master" ]]; then
          # Build
          echo "Building the Docker image for 'master' branch"
          docker build -t gcr.io/$_PROJECT_ID/$_SERVICE_NAME:$COMMIT_SHA \
            --build-arg BUILD_IMAGE_DOMAIN=$_ENV_GCR_IMAGE_DOMAIN \
            --build-arg BUILD_HOSTNAME=$_ENV_GCR_HOSTNAME \
            --build-arg BUILD_EMAIL_SERVER_HOST=$_ENV_GCR_EMAIL_SERVER_HOST \
            --build-arg BUILD_EMAIL_SERVER_PORT=$_ENV_GCR_EMAIL_SERVER_PORT \
            --build-arg BUILD_EMAIL_FROM=$_ENV_GCR_EMAIL_FROM \
            --build-arg BUILD_SOCIAL_GITHUB=$_ENV_GCR_SOCIAL_GITHUB \
            .

          # Push
          echo "Pushing the Docker image to Google Container Registry"
          docker push gcr.io/$_PROJECT_ID/$_SERVICE_NAME:$COMMIT_SHA

          # Deploy
          echo "Deploying the Docker image to Cloud Run"
          gcloud run deploy $_SERVICE_NAME \
            --image gcr.io/$_PROJECT_ID/$_SERVICE_NAME:$COMMIT_SHA \
            --project $_PROJECT_ID \
            --region $_DEPLOY_REGION \
            --platform $_PLATFORM \
            --allow-unauthenticated \
            --cpu-boost \
            --vpc-connector $_VPC_CONNECTOR \
            --region $_VPC_REGION \
            --vpc-egress $_VPC_EGRESS \
            --set-env-vars GCR_EMAIL_FROM=$_ENV_GCR_EMAIL_FROM,GCR_EMAIL_SERVER_HOST=$_ENV_GCR_EMAIL_SERVER_HOST,GCR_EMAIL_SERVER_PORT=$_ENV_GCR_EMAIL_SERVER_PORT,GCR_HOSTNAME=$_ENV_GCR_HOSTNAME,GCR_IMAGE_DOMAIN=$_ENV_GCR_IMAGE_DOMAIN,GCR_SOCIAL_GITHUB=$_ENV_GCR_SOCIAL_GITHUB \
            --update-secrets $_SECRET_VAR_1=$_SECRET_VAR_1:latest,$_SECRET_VAR_2_1=$_SECRET_VAR_2_1:latest,$_SECRET_VAR_2_2=$_SECRET_VAR_2_2:latest,$_SECRET_VAR_3_1=$_SECRET_VAR_3_1:latest,$_SECRET_VAR_3_2=$_SECRET_VAR_3_2:latest,$_SECRET_VAR_4_1=$_SECRET_VAR_4_1:latest,$_SECRET_VAR_4_2=$_SECRET_VAR_4_2:latest,$_SECRET_VAR_5_1=$_SECRET_VAR_5_1:latest,$_SECRET_VAR_5_2=$_SECRET_VAR_5_2:latest
        else
          echo "Build stopped. The build step is triggered only for the 'master' branch."
          exit 0
        fi
    secretEnv:
      - $_SECRET_VAR_1
      - $_SECRET_VAR_2_1
      - $_SECRET_VAR_2_2
      - $_SECRET_VAR_3_1
      - $_SECRET_VAR_3_2
      - $_SECRET_VAR_4_1
      - $_SECRET_VAR_4_2
      - $_SECRET_VAR_5_1
      - $_SECRET_VAR_5_2
availableSecrets:
  secretManager:
    - versionName: projects/$_PROJECT_ID/secrets/$_SECRET_VAR_1/versions/latest
      env: $_SECRET_VAR_1
    - versionName: projects/$_PROJECT_ID/secrets/$_SECRET_VAR_2_1/versions/latest
      env: $_SECRET_VAR_2_1
    - versionName: projects/$_PROJECT_ID/secrets/$_SECRET_VAR_2_2/versions/latest
      env: $_SECRET_VAR_2_2
    - versionName: projects/$_PROJECT_ID/secrets/$_SECRET_VAR_3_1/versions/latest
      env: $_SECRET_VAR_3_1
    - versionName: projects/$_PROJECT_ID/secrets/$_SECRET_VAR_3_2/versions/latest
      env: $_SECRET_VAR_3_2
    - versionName: projects/$_PROJECT_ID/secrets/$_SECRET_VAR_4_1/versions/latest
      env: $_SECRET_VAR_4_1
    - versionName: projects/$_PROJECT_ID/secrets/$_SECRET_VAR_4_2/versions/latest
      env: $_SECRET_VAR_4_2
    - versionName: projects/$_PROJECT_ID/secrets/$_SECRET_VAR_5_1/versions/latest
      env: $_SECRET_VAR_5_1
    - versionName: projects/$_PROJECT_ID/secrets/$_SECRET_VAR_5_2/versions/latest
      env: $_SECRET_VAR_5_2
timeout: 1200s
options:
  volumes:
    - name: "cache"
      path: "/cache"
